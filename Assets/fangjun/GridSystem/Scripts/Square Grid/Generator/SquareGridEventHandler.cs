using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using GridSystem;

namespace GridSystem.Square.Generator
{
    /// <summary>
    /// The event handler of various of grid event
    /// stores the selected grid GameObject
    /// can be used to find the Vertex in the GridSystem
    /// </summary>
    public class SquareGridEventHandler : MonoBehaviour, IGridEventHandler
    {
        #region Singleton

        private static SquareGridEventHandler _instance;

        /// <summary>
        /// The singleton of SquareGridEventHandler
        /// initialize when generated by the SquareGridGenerator
        /// </summary>
        public static SquareGridEventHandler Instance
        {
            get
            {
                return _instance;
            }
            set
            {
                _instance = value;
            }
        }

        #endregion
        
        #region Private Field

        /// <summary>
        /// The gameObject the cursor is pointing
        /// </summary>
        [SerializeField]
        private GameObject _currentGridObject;

        /// <summary>
        /// The GridElement of _currentGridObject
        /// </summary>
        [SerializeField]
        private GridElement _currentGridElement;
        
        /// <summary>
        /// The event triggered when currentGridObject changes
        /// </summary>
        private Action _updateSelectedGrid;

        #endregion
        
        #region Public Field

        /// <summary>
        /// The GameObject the cursor is pointing
        /// </summary>
        public GameObject currentGridObject
        {
            get
            {
                return _currentGridObject;
            }
            set
            {
                _currentGridObject = value;
                // get the _currentGridElement
                _currentGridElement = _currentGridObject.GetComponent<GridElement>();
                // invoke updateGrid event
                _updateSelectedGrid?.Invoke();
            }
        }

        /// <summary>
        /// The GridElement of _currentGameObject
        /// </summary>
        public GridElement currentGridElement
        {
            get
            {
                return _currentGridElement;
            }
        }

        
        /// <summary>
        /// The event triggered when currentGridObject changes
        /// </summary>
        public Action updateSelectedGrid
        {
            get
            {
                return _updateSelectedGrid;
            }
            set
            {
                _updateSelectedGrid = value;
            }
        }

        /// <summary>
        /// The max length of the detect ray
        /// </summary>
        public float maxRayLength;

        #endregion

        private void Awake()
        {
            Instance = this;
        }

        // Start is called before the first frame update
        void Start()
        {
            
        }

        // Update is called once per frame
        void Update()
        {
        }

        #region Private Methods
        
        

        #endregion
    }   
}
